# breadth_first_search.py

def breadth_first_search(maze_height, maze_width, start_point, goal_point, maze):
    """
    maze_height: 迷路の高さ
    maze_width: 迷路の幅
    start_point: スタート地点(y, x)
    goal_point: ゴール地点(y, x)
    maze: 迷路図（文字列のリスト） '########','#......#','#.######','#..#...#','#..##..#','##.....#','########'
    """
    # write code here
    maze_list = [list(s) for s in maze] # [['#', '#' ...], ['#','.',...]]
    maze_list[start_point[0]-1][start_point[1]-1] = 0
    search_position = [] # 探索する[y, x]
    search_position.append([start_point[0] - 1, start_point[1] - 1])
    while current_position := search_position.pop(0): # 一番最初に入った要素を取り出す
        current_y, current_x = current_position[0], current_position[1]
        current_position_counts = maze_list[current_y][current_x] # 今いる場所の値
        for append_y, append_x in [[1,0],[-1,0],[0,-1],[0,1]]:
            next_y, next_x = current_y + append_y, current_x + append_x
            if any((next_y < 0, next_x < 0, next_y >= maze_height, next_x >= maze_width)):
                continue
            if maze_list[next_y][next_x] == '.':
                maze_list[next_y][next_x] = current_position_counts + 1
                search_position.append([next_y, next_x]) # 次の探索場所を追加してwhileで次に取り出される
                if next_y == goal_point[0]-1 and next_x == goal_point[1] - 1:
                    print(current_position_counts + 1)
                    return        



# 0
# '########',
# '#01....#',
# '#1######',
# '#23#...#',
# '#3.##..#',
# '##.....#',
# '########'

maze_heights = [7, 5, 50]
maze_widths = [8, 8, 50]
start_points = [[2, 2], [2, 2], [2, 2]]
goal_points = [[4, 5], [2, 4], [49, 49]]
mazes = [
    ['########','#......#','#.######','#..#...#','#..##..#','##.....#','########'],
    ['########','#.#....#','#.###..#','#......#','########'],

]
breadth_first_search(maze_heights[0], maze_widths[0], start_points[0], goal_points[0], mazes[0]) # 11
breadth_first_search(maze_heights[1], maze_widths[1], start_points[1], goal_points[1], mazes[1]) # 10
breadth_first_search(maze_heights[2], maze_widths[2], start_points[2], goal_points[2], mazes[2]) # 94
